# ! /usr/bin/ksh
# script para fazer a comparação 2 a 2 entre sequências sem considerar o sinal!
# esse script é utilizado pelo estat
# Usage: compara_estat arq out
# saída: scaffold begin end conf familias flags
if [ -z $2 ];
then
        echo -ne "\nThis script runs compara_estat.\n"
        echo -ne "Usage: compara_estat arq out\n\nNext time do it right!\n\n"
        exit
fi
dir=`pwd`
in=temp.`date +%s` # temporary file
cat $1 | grep -v "#" > $in
out=$2
temp=$in.out
if [ -f '$out' ];
then
        rm $out
fi
# pegando scaffolds
sca=(`awk '{print $1}' $in | grep -v "#" | uniq`)
let "nsca=${#sca[@]}"
outsca=$out.temp.sca
insca=$in.sca
# Por scaffold
for((s=0;s<nsca;s++));
do
	awk '{if ($1 == "'${sca[$s]}'") print $0}' $in | sort -k 2 -n > $insca # arquivo com mesmo scaffold
	# pegando sequências
	flag=(`grep -v "#" $insca | awk '{$1=$2=$3=$4=$5=$6=$7=""; print $0}' | tr -s " " "\n" | cut -d'.' -f1`)
	bng=(`grep -v "#" $insca | awk '{print $2}'`)
	end=(`grep -v "#" $insca  | awk '{print $3}'`)
	conf=(`grep -v "#" $insca  | awk '{print $5}'`)
	fam=(`grep -v "#" $insca  | awk '{print $6}'`)
	nest=(`grep -v "#" $insca  | awk '{print $7}'`)
	let "nseq=${#bng[@]}"
	k=0
	indi=0
	declare -a list
	jini=0
	# Comparando coordenadas 2 a 2:
	indjini=0
	for((i=0;i<nseq;i++));
	do
		let "indjini=indjini+conf[i]"
		indj=$indjini
		let "jini=i+1"
		for((j=jini;j<nseq;j++));
		do
			t=0
####################     condição que garante que não haverá nenhuma sobreposição a partir desta sequência, #############
####################     visto que o arquivo é ordenado de acordo com bng! Este é o corte final! 	    #############
			if [ ${bng[$j]} -gt ${end[$i]} ];
			then
				j=$nseq
			else
#				echo ${bng[$i]} ${end[$i]} ${bng[$j]} ${end[$j]}
##################################### voltando a concatenação ###########################################
# sequências iguais
if [ ${bng[$i]} -eq ${bng[$j]} ] && [ ${end[$i]} -eq ${end[$j]} ];
then
#	echo "iguais" $i $j
	declare -a flagsloc
	flagsloc=(`echo ${flag[@]:$indi:conf[i]} ${flag[@]:$indj:conf[j]} | tr -s " " "\n" | sort | uniq`)
	let "nconf=${#flagsloc[@]}"
	if [[ ${nest[$i]} == "nest" ]] || [[ ${nest[$j]} == "nest" ]];
	then
		nestu="nest"
	else
		nestu="----"
	fi
	echo -ne "${sca[$s]}\t${bng[$j]}\t${end[$j]}\t$nconf\t${fam[$i]}|${fam[$j]}\t$nestu\t${flagsloc[@]}\n">> $outsca
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
	unset flagsloc
fi
# sobreposição com início igual
if [ ${bng[$i]} -eq ${bng[$j]} ] && [ ${end[$i]} -ne ${end[$j]} ];
then
#	echo "inicio igual" $i $j
	ini1=${bng[$i]} #seq comum
	if [ ${end[$j]} -lt ${end[$i]} ];
	then
	      	fin1=${end[$j]}
	       	let "ini3=end[j]+1" #seq posterior
	      	fin3=${end[$i]}
		confp=${conf[$i]}
		famp=${fam[$i]}
		indp=indi
		indpf=indi+conf[i]
	else
		fin1=${end[$i]}
                let "ini3=end[i]+1" #seq posterior
                fin3=${end[$j]}
		confp=${conf[$j]}
                famp=${fam[$j]}
		indp=indj
        	indpf=indj+conf[j]
	fi
	if [[ " ${list[*]} " == *" $i "* ]];
	then
		fin3=(`awk '{if ($2 == "'${bng[$i]}'") print $3}' $outsca`)
                n=(`awk '{if ($2 == "'${bng[$i]}'") print NR}' $outsca`)
		sed ''$n'd' $outsca > $temp
		mv $temp $outsca
	fi
	declare -a flagsloc
        flagsloc=(`echo ${flag[@]:$indi:conf[i]} ${flag[@]:$indj:conf[j]} | tr -s " " "\n" | sort | uniq`)
        let "nconf=${#flagsloc[@]}"
        if [[ ${nest[$i]} == "nest" ]] || [[ ${nest[$j]} == "nest" ]];
        then
                nestu="nest"
        else
                nestu="----"
        fi
	# seq comum
	echo -ne "${sca[$s]}\t$ini1\t$fin1\t$nconf\t${fam[$i]}|${fam[$j]}\t$nestu\t${flagsloc[@]}\n">> $outsca
	# seq posterior
	echo -ne "${sca[$s]}\t$ini3\t$fin3\t$confp\t$famp\t$nestu">> $outsca
	for((l=indp;l<indpf;l++));
        do
	        echo -ne "\t${flag[$l]}">> $outsca
        done
        echo >> $outsca
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
	unset flagsloc
fi
# sobreposição com final igual
if [ ${bng[$i]} -lt ${bng[$j]} ] && [ ${end[$i]} -eq ${end[$j]} ];
then
#	echo "final igual" $i $j
	ini1=${bng[$j]} #seq comum
	fin1=${end[$j]}
	ini2=${bng[$i]} #seq anterior
	let "fin2=bng[j]-1"
	if [[ " ${list[*]} " == *" $i "* ]];
	then
		ini2=(`awk '{if ($3 == "'${end[$i]}'") print $2}' $outsca`)
                n=(`awk '{if ($3 == "'${end[$i]}'") print NR}' $outsca`)
		sed ''$n'd' $outsca > $temp
		mv $temp $outsca
	fi
	declare -a flagsloc
        flagsloc=(`echo ${flag[@]:$indi:conf[i]} ${flag[@]:$indj:conf[j]} | tr -s " " "\n" | sort | uniq`)
        let "nconf=${#flagsloc[@]}"
        if [[ ${nest[$i]} == "nest" ]] || [[ ${nest[$j]} == "nest" ]];
        then
                nestu="nest"
        else
                nestu="----"
        fi
	# seq comum
	echo -ne "${sca[$s]}\t$ini1\t$fin1\t$nconf\t${fam[$i]}|${fam[$j]}\t$nestu\t${flagsloc[@]}\n">> $outsca
	# seq anterior
	if [ $ini2 -le $fin2 ];
	then
		echo -ne "${sca[$s]}\t$ini2\t$fin2\t${conf[$i]}\t${fam[$i]}\t$nestu">> $outsca
		for((l=indi;l<indi+conf[i];l++));
		do
			echo -ne "\t${flag[$l]}">> $outsca
	        done
		echo >> $outsca
	fi
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
	unset flagsloc
fi
# seq j dentro de seq i
if [ ${bng[$i]} -lt ${bng[$j]} ] && [ ${end[$i]} -gt ${end[$j]} ];
then
#	echo "dentro" $i $j
	seq2=1
	ini1=${bng[$j]} #seq comum
	fin1=${end[$j]}
	ini2=${bng[$i]} #seq anterior
	let "fin2=bng[j]-1"
	let "ini3=end[j]+1" #seq posterior
	fin3=${end[$i]}
	if [[ " ${list[*]} " == *" $i "* ]];
	then
		f=(`awk '{if ($2 == "'${bng[$i]}'") print $3}' $outsca`)
		if [ ${bng[$j]} -lt $f ];
		then
			fin3=$f
			n=(`awk '{if ($2 == "'${bng[$i]}'") print NR}' $outsca`)
			sed ''$n'd' $outsca > $temp
			mv $temp $outsca
		else
			f=(`awk '{if ($3 == "'${end[$i]}'") print $2}' $outsca`)
			if [ $f -eq ${bng[$j]} ]; #não há seq anterior
			then
				seq2=0
			else
				ini2=$f
			fi
			n=(`awk '{if ($3 == "'${end[$i]}'") print NR}' $outsca`)
	                sed ''$n'd' $outsca > $temp
			mv $temp $outsca
		fi
	fi
	declare -a flagsloc
        flagsloc=(`echo ${flag[@]:$indi:conf[i]} ${flag[@]:$indj:conf[j]} | tr -s " " "\n" | sort | uniq`)
        let "nconf=${#flagsloc[@]}"
        if [[ ${nest[$i]} == "nest" ]] || [[ ${nest[$j]} == "nest" ]];
        then
                nestu="nest"
        else
                nestu="----"
        fi
	# seq comum
	echo -ne "${sca[$s]}\t$ini1\t$fin1\t$nconf\t${fam[$i]}|${fam[$j]}\t$nestu\t${flagsloc[@]}\n">> $outsca
	# seq anterior
	if [ $seq2 -eq 1 ];
	then
		echo -ne "${sca[$s]}\t$ini2\t$fin2\t${conf[$i]}\t${fam[$i]}\t$nestu">> $outsca
		for((l=indi;l<indi+conf[i];l++));
               	do
               	        echo -ne "\t${flag[$l]}">> $outsca
               	done
               	echo >> $outsca
	fi
	# seq posterior
	echo -ne "${sca[$s]}\t$ini3\t$fin3\t${conf[$i]}\t${fam[$i]}\t$nestu">> $outsca
	for((l=indi;l<indi+conf[i];l++));	        	                
	do
		echo -ne "\t${flag[$l]}">> $outsca
	done
	echo >> $outsca
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
	unset flagsloc
fi
# sobreposição de um pedaço
if [ ${bng[$i]} -lt ${bng[$j]} ] && [ ${end[$i]} -lt ${end[$j]} ] && [ ${bng[$j]} -le ${end[$i]} ];
then
#	echo "pedaço" $i $j
	seq2=1
	ini1=${bng[$j]} #seq comum
	fin1=${end[$i]}
	ini2=${bng[$i]} #seq anterior
	let "fin2=bng[j]-1"
	let "ini3=end[i]+1" #seq posterior
	fin3=${end[$j]}
	if [[ " ${list[*]} " == *" $i "* ]];
	then
		ini2=(`awk '{if ($3 == "'${end[$i]}'") print $2}' $outsca`)
		if [ $ini2 -eq $ini1 ];
		then
			seq2=0
		fi
                n=(`awk '{if ($3 == "'${end[$i]}'") print NR}' $outsca`)
		sed ''$n'd' $outsca > $temp
		mv $temp $outsca
	fi
	declare -a flagsloc
        flagsloc=(`echo ${flag[@]:$indi:conf[i]} ${flag[@]:$indj:conf[j]} | tr -s " " "\n" | sort | uniq`)
        let "nconf=${#flagsloc[@]}"
        if [[ ${nest[$i]} == "nest" ]] || [[ ${nest[$j]} == "nest" ]];
        then
                nestu="nest"
        else
                nestu="----"
        fi
	# seq comum
	echo -ne "${sca[$s]}\t$ini1\t$fin1\t$nconf\t${fam[$i]}|${fam[$j]}\t$nestu\t${flagsloc[@]}\n">> $outsca
	# seq anterior i
	if [ $seq2 -eq 1 ];
	then
		echo -ne "${sca[$s]}\t$ini2\t$fin2\t${conf[$i]}\t${fam[$i]}\t$nestu">> $outsca
		for((l=indi;l<indi+conf[i];l++));
		do
			echo -ne "\t${flag[$l]}">> $outsca
		done
		echo >> $outsca
	fi
	# seq posterior j
	echo -ne "${sca[$s]}\t$ini3\t$fin3\t${conf[$j]}\t${fam[$j]}\t$nestu">> $outsca
	for((m=indj;m<indj+conf[j];m++));
	do      
		echo -ne "\t${flag[$m]}">> $outsca
	done    
	echo >> $outsca
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
	unset flagsloc
fi
###################################### fim concatenação diferente ###########################################
			fi
			let "indj=indj+conf[j]"
		done
		let "indi=indi+conf[i]"
	done
	indi=0
	for((i=0;i<nseq;i++));
	do
		if [[ " ${list[*]} " != *" $i "* ]];
		then
			echo -ne "${sca[$s]}\t${bng[$i]}\t${end[$i]}\t${conf[$i]}\t${fam[$i]}\t${nest[$i]}">> $outsca
			for((l=indi;l<indi+conf[i];l++));
	                do
	                	echo -ne "\t${flag[$l]}">> $outsca
	                done
	                echo >> $outsca
		fi
		let "indi=indi+conf[i]"
	done
	rm $insca
	cat $outsca >> $out
	rm $outsca
	unset list
done
rm $in
