#########################################  Laura Joana SILVA LOPES, Jan 2016 #############################################
# ! /usr/bin/ksh # para ter o arquivo colorido em VIM
# script para fazer a comparação entre sequências!
# Sobre a classificação nested o compara pega a maior flag.
# Exemplos: I com S = IS | I com IS = IS
# Usagem: compara_geral arq1 arq2
# saída: scaffold begin end sinal conf familias nested flags
##########################################################################################################################
if [ -z $2 ];
then
        echo -ne "\nThis script runs compara_geral.\n"
        echo -ne "Usage: compara_geral arq1 arq2\n\nNext time do it right!\n\n"
        exit
fi
dir=`pwd`
if [[ $1 == *"filtro"* ]]
then
	n1=`echo $1 | rev | cut -d'/' -f1 | rev | cut -d'_' -f1`
else
	n1=`echo $1 | rev | cut -d'/' -f1 | rev | cut -d'.' -f1`
fi
if [[ $2 == *"filtro"* ]]
then
	n2=`echo $2 | rev | cut -d'/' -f1 | rev | cut -d'_' -f1`
else
	n2=`echo $2 | rev | cut -d'/' -f1 | rev | cut -d'.' -f1`
fi
in=temp.$n1$n2.`date +%s` # temporary file
cat $1 $2 | grep -v "#" > $in
out=$dir"/"$n1"_"$n2.csv
temp=$in.out.temp
if [ -f $out ];
then
        rm $out
fi
echo -ne "# scaffold\t\tbegin\tend\tsinal\tconfiança\tfamília(s)\tflag(s)\n" > $out
echo "salvo arquivo temporário"
# pegando scaffolds
temp1=1.$in
temp2=2.$in
awk '{print $1}' $1 | grep -v "#" | uniq > $temp1
awk '{print $1}' $2 | grep -v "#" | uniq > $temp2
sca=(`diff -y $temp1 $temp2 | grep -v ">" | awk '{print $1}'`) # scaffolds que aparecem nos dois arquivos
scadiff=(`diff -y $temp1 $temp2 | grep ">" | awk '{print $2}'`) # scaffolds que só aparecem em um arquivo
let "nscadiff=${#scadiff[@]}"
let "nsca=${#sca[@]}"
outsca=$out.temp.sca
insca=$in.temp.sca
# Por scaffold
for((s=0;s<nsca;s++));
do
	awk '{if ($1 == "'${sca[$s]}'") print $0}' $in | sort -k 2 -n > $insca # arquivo com mesmo scaffold
	echo -ne ${sca[$s]} "\t"
	date
	# pegando sequências
	flag=(`grep -v "#" $insca | awk '{$1=$2=$3=$4=$5=$6=$7=""; print $0}'`)
	bng=(`grep -v "#" $insca | awk '{print $2}'`)
	end=(`grep -v "#" $insca  | awk '{print $3}'`)
	sin=(`grep -v "#" $insca  | awk '{print $4}'`)
	conf=(`grep -v "#" $insca  | awk '{print $5}'`)
	fam=(`grep -v "#" $insca  | awk '{print $6}'`)
	nest=(`grep -v "#" $insca  | awk '{print $7}'`)
	let "nseq=${#bng[@]}"
	k=0
	indi=0
	declare -a list
	jini=0
	# Comparando coordenadas 2 a 2:
	indjini=0
	for((i=0;i<nseq;i++));
	do
		let "indjini=indjini+conf[i]"
		indj=$indjini
		let "jini=i+1"
		for((j=jini;j<nseq;j++));
		do
			t=0
####################     condição que garante que não haverá nenhuma sobreposição a partir desta sequência, #############
####################     visto que o arquivo é ordenado de acordo com bng! Este é o corte final! 	    #############
			if [ ${bng[$j]} -gt ${end[$i]} ];
			then
				j=$nseq
			else
				# testando as flags
				for((l=indi;l<indi+conf[i];l++));
				do
					for((m=indj;m<indj+conf[j];m++));
					do
						teste1=(`echo ${flag[$l]} | cut -d'.' -f1`)
						teste2=(`echo ${flag[$m]} | cut -d'.' -f1`)
						if [[ $teste1 == $teste2 ]];
						then
							t=1
						fi
					done
				done
				#  programas diferentes &  mesmo sinal
				if [ $t -ne "1" ] && [ ${sin[$i]} == ${sin[$j]} ];
				then
				#echo ${sin[$j]} ${bng[$i]} ${end[$i]} ${bng[$j]} ${end[$j]}
##################################### voltando a concatenação ###########################################
# sequências iguais
if [ ${bng[$i]} -eq ${bng[$j]} ] && [ ${end[$i]} -eq ${end[$j]} ];
then
	#echo "iguais" $i $j
	let "nconf=conf[i]+conf[j]"
	cla=(`echo ${nest[$i]}${nest[$j]} | fold -w1 | sort | uniq | tr -d "\n" | tr -d "-"`)
	if [ -z $cla ];
	then
		cla="----"
	fi
	echo -ne "${sca[$s]}\t${bng[$j]}\t${end[$j]}\t${sin[$i]}\t$nconf\t${fam[$i]}|${fam[$j]}\t$cla">> $outsca
	for((l=indi;l<indi+conf[i];l++));
	do
		echo -ne "\t${flag[$l]}">> $outsca
	done
	for((m=indj;m<indj+conf[j];m++));
	do
		echo -ne "\t${flag[$m]}">> $outsca
	done
	echo >> $outsca
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
fi
# sobreposição com início igual
if [ ${bng[$i]} -eq ${bng[$j]} ] && [ ${end[$i]} -ne ${end[$j]} ];
then
	#echo "inicio igual" $i $j
	ini1=${bng[$i]} #seq comum
	if [ ${end[$j]} -lt ${end[$i]} ];
	then
		cla3=${nest[$i]}
	      	fin1=${end[$j]}
	       	let "ini3=end[j]+1" #seq posterior
	      	fin3=${end[$i]}
		confp=${conf[$i]}
		famp=${fam[$i]}
		indp=indi
		indpf=indi+conf[i]
	else
		cla3=${nest[$j]}
		fin1=${end[$i]}
                let "ini3=end[i]+1" #seq posterior
                fin3=${end[$j]}
		confp=${conf[$j]}
                famp=${fam[$j]}
		indp=indj
        	indpf=indj+conf[j]
	fi
	if [[ " ${list[*]} " == *" $i "* ]];
	then
		fin3=(`awk '{if (($4 == "'${sin[$i]}'")&&($2 == "'${bng[$i]}'")) print $3}' $outsca`)
                n=(`awk '{if (($4 == "'${sin[$i]}'")&&($2 == "'${bng[$i]}'")) print NR}' $outsca`)
		sed ''$n'd' $outsca > $temp
		mv $temp $outsca
	fi
	let "nconf=conf[i]+conf[j]"
	cla1=(`echo ${nest[$i]}${nest[$j]} | fold -w1 | sort | uniq | tr -d "\n" | tr -d "-"`)
        if [ -z $cla1 ];
        then
                cla1="----"
        fi
	# seq comum
	echo -ne "${sca[$s]}\t$ini1\t$fin1\t${sin[$i]}\t$nconf\t${fam[$i]}|${fam[$j]}\t$cla1">> $outsca
	for((l=indi;l<indi+conf[i];l++));
        do
	        echo -ne "\t${flag[$l]}">> $outsca
        done
        for((m=indj;m<indj+conf[j];m++));
        do      
	        echo -ne "\t${flag[$m]}">> $outsca
        done    
        echo >> $outsca
	# seq posterior
	echo -ne "${sca[$s]}\t$ini3\t$fin3\t${sin[$i]}\t$confp\t$famp\t$cla3">> $outsca
	for((l=indp;l<indpf;l++));
        do
	        echo -ne "\t${flag[$l]}">> $outsca
        done
        echo >> $outsca
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
fi
# sobreposição com final igual
if [ ${bng[$i]} -lt ${bng[$j]} ] && [ ${end[$i]} -eq ${end[$j]} ];
then
	#echo "final igual" $i $j
	ini1=${bng[$j]} #seq comum
	fin1=${end[$j]}
	cla1=(`echo ${nest[$i]}${nest[$j]} | fold -w1 | sort | uniq | tr -d "\n" | tr -d "-"`)
	if [ -z $cla1 ];
        then
                cla1="----"
        fi
	ini2=${bng[$i]} #seq anterior
	cla2=${nest[$i]}
	let "fin2=bng[j]-1"
	if [[ " ${list[*]} " == *" $i "* ]];
	then
		ini2=(`awk '{if (($4 == "'${sin[$i]}'")&&($3 == "'${end[$i]}'")) print $2}' $outsca`)
                n=(`awk '{if (($4 == "'${sin[$i]}'")&&($3 == "'${end[$i]}'")) print NR}' $outsca`)
		sed ''$n'd' $outsca > $temp
		mv $temp $outsca
	fi
	let "nconf=conf[i]+conf[j]"
	# seq comum
	echo -ne "${sca[$s]}\t$ini1\t$fin1\t${sin[$i]}\t$nconf\t${fam[$i]}|${fam[$j]}\t$cla1">> $outsca
	for((l=indi;l<indi+conf[i];l++));
	do
		echo -ne "\t${flag[$l]}">> $outsca
	done
	for((m=indj;m<indj+conf[j];m++));
	do      
		echo -ne "\t${flag[$m]}">> $outsca
	done    
	echo >> $outsca
	# seq anterior
	if [ $ini2 -le $fin2 ];
	then
		echo -ne "${sca[$s]}\t$ini2\t$fin2\t${sin[$i]}\t${conf[$i]}\t${fam[$i]}\t$cla2">> $outsca
		for((l=indi;l<indi+conf[i];l++));
		do
			echo -ne "\t${flag[$l]}">> $outsca
	        done
		echo >> $outsca
	fi
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
fi
# seq j dentro de seq i
if [ ${bng[$i]} -lt ${bng[$j]} ] && [ ${end[$i]} -gt ${end[$j]} ];
then
	#echo "dentro" $i $j
	seq2=1
	ini1=${bng[$j]} #seq comum
	fin1=${end[$j]}
	cla1=(`echo ${nest[$i]}${nest[$j]} | fold -w1 | sort | uniq | tr -d "\n" | tr -d "-"`)
	if [ -z $cla1 ];
        then
                cla1="----"
        fi
	ini2=${bng[$i]} #seq anterior
	cla2=${nest[$i]}
	let "fin2=bng[j]-1"
	let "ini3=end[j]+1" #seq posterior
	fin3=${end[$i]}
	cla3=$cla2
	if [[ " ${list[*]} " == *" $i "* ]];
	then
		f=(`awk '{if (($4 == "'${sin[$i]}'")&&($2 == "'${bng[$i]}'")) print $3}' $outsca`)
		if [ ${bng[$j]} -lt $f ];
		then
			fin3=$f
			n=(`awk '{if (($2 == "'${bng[$i]}'")&&($4 == "'${sin[$i]}'")) print NR}' $outsca`)
			sed ''$n'd' $outsca > $temp
			mv $temp $outsca
		else
			f=(`awk '{if (($4 == "'${sin[$i]}'")&&($3 == "'${end[$i]}'")) print $2}' $outsca`)
			if [ $f -eq ${bng[$j]} ]; #não há seq anterior
			then
				seq2=0
			else
				ini2=$f
			fi
			n=(`awk '{if (($4 == "'${sin[$i]}'")&&($3 == "'${end[$i]}'")) print NR}' $outsca`)
	                sed ''$n'd' $outsca > $temp
			mv $temp $outsca
		fi
	fi
	let "nconf=conf[i]+conf[j]"
	# seq comum
	echo -ne "${sca[$s]}\t$ini1\t$fin1\t${sin[$i]}\t$nconf\t${fam[$i]}|${fam[$j]}\t$cla1">> $outsca
	for((l=indi;l<indi+conf[i];l++));
	do
        	echo -ne "\t${flag[$l]}">> $outsca
        done
        for((m=indj;m<indj+conf[j];m++));
        do      
        	echo -ne "\t${flag[$m]}">> $outsca
        done    
        echo >> $outsca
	# seq anterior
	if [ $seq2 -eq 1 ];
	then
		echo -ne "${sca[$s]}\t$ini2\t$fin2\t${sin[$i]}\t${conf[$i]}\t${fam[$i]}\t$cla2">> $outsca
		for((l=indi;l<indi+conf[i];l++));
               	do
               	        echo -ne "\t${flag[$l]}">> $outsca
               	done
               	echo >> $outsca
	fi
	# seq posterior
	echo -ne "${sca[$s]}\t$ini3\t$fin3\t${sin[$i]}\t${conf[$i]}\t${fam[$i]}\t$cla3">> $outsca
	for((l=indi;l<indi+conf[i];l++));	        	                
	do
		echo -ne "\t${flag[$l]}">> $outsca
	done
	echo >> $outsca
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
fi
# sobreposição de um pedaço
if [ ${bng[$i]} -lt ${bng[$j]} ] && [ ${end[$i]} -lt ${end[$j]} ] && [ ${bng[$j]} -le ${end[$i]} ];
then
	#echo "pedaço" $i $j
	seq2=1
	ini1=${bng[$j]} #seq comum
	fin1=${end[$i]}
	cla1=(`echo ${nest[$i]}${nest[$j]} | fold -w1 | sort | uniq | tr -d "\n" | tr -d "-"`)
	if [ -z $cla1 ];
        then
                cla1="----"
        fi
	ini2=${bng[$i]} #seq anterior
	cla2=${nest[$i]}
	let "fin2=bng[j]-1"
	let "ini3=end[i]+1" #seq posterior
	cla3=${nest[$j]}
	fin3=${end[$j]}
	if [[ " ${list[*]} " == *" $i "* ]];
	then
		ini2=(`awk '{if (($4 == "'${sin[$i]}'")&&($3 == "'${end[$i]}'")) print $2}' $outsca`)
		if [ $ini2 -eq $ini1 ];
		then
			seq2=0
		fi
                n=(`awk '{if (($4 == "'${sin[$i]}'")&&($3 == "'${end[$i]}'")) print NR}' $outsca`)
		sed ''$n'd' $outsca > $temp
		mv $temp $outsca
	fi
	let "nconf=conf[i]+conf[j]"
	# seq comum
	echo -ne "${sca[$s]}\t$ini1\t$fin1\t${sin[$i]}\t$nconf\t${fam[$i]}|${fam[$j]}\t$cla1">> $outsca
	for((l=indi;l<indi+conf[i];l++));
	do
		echo -ne "\t${flag[$l]}">> $outsca
	done
	for((m=indj;m<indj+conf[j];m++));
	do      
		echo -ne "\t${flag[$m]}">> $outsca
	done    
	echo >> $outsca
	# seq anterior i
	if [ $seq2 -eq 1 ];
	then
		echo -ne "${sca[$s]}\t$ini2\t$fin2\t${sin[$i]}\t${conf[$i]}\t${fam[$i]}\t$cla2">> $outsca
		for((l=indi;l<indi+conf[i];l++));
		do
			echo -ne "\t${flag[$l]}">> $outsca
		done
		echo >> $outsca
	fi
	# seq posterior j
	echo -ne "${sca[$s]}\t$ini3\t$fin3\t${sin[$i]}\t${conf[$j]}\t${fam[$j]}\t$cla3">> $outsca
	for((m=indj;m<indj+conf[j];m++));
	do      
		echo -ne "\t${flag[$m]}">> $outsca
	done    
	echo >> $outsca
	let "list[k]=i"
	let "list[k+1]=j"
	let "k=k+2"
fi
###################################### fim concatenação diferente ###########################################
				fi
			fi
			let "indj=indj+conf[j]"
		done
		let "indi=indi+conf[i]"
	done
	indi=0
	for((i=0;i<nseq;i++));
	do
		if [[ " ${list[*]} " != *" $i "* ]];
		then
			echo -ne "${sca[$s]}\t${bng[$i]}\t${end[$i]}\t${sin[$i]}\t${conf[$i]}\t${fam[$i]}\t${nest[$i]}">> $outsca
			for((l=indi;l<indi+conf[i];l++));
	                do
	                	echo -ne "\t${flag[$l]}">> $outsca
	                done
	                echo >> $outsca
		fi
	let "indi=indi+conf[i]"
	done
	rm $insca
	cat $outsca | sort -k 2 -n >> $out
	rm $outsca
	unset list
	echo -ne "Terminado o scaffold" $s"/"$nsca "\t"
	date
done
echo "Imprimindo os "$nscadiff" que só aparecem em um arquivo"
for((s=0;s<nscadiff;s++));
do
        awk '{if ($1 == "'${scadiff[$s]}'") print $0}' $in | sort -k 2 -n >> $out # scaffolds que só aparecem em um arquivo
done
rm $in
rm $temp1
rm $temp2
echo -ne "\nComparações entre $n1 e $n2 terminadas!\n\n"
