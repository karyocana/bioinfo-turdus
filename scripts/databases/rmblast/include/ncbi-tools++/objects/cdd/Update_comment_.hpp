/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Update_comment_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'cdd.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_CDD_UPDATE_COMMENT_BASE_HPP
#define OBJECTS_CDD_UPDATE_COMMENT_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CPub;
class CSeq_loc;


// generated classes

/////////////////////////////////////////////////////////////////////////////
/// Update-align is supposed to contain alignments that still need some work
/// done to fit into the CD-proper alignment. These originate from the
/// CD update process (generated by Blast, for example) or may be created in
/// an editing session to save its state
class NCBI_CDD_EXPORT CUpdate_comment_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CUpdate_comment_Base(void);
    // destructor
    virtual ~CUpdate_comment_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();


    /// Choice variants.
    enum E_Choice {
        e_not_set = 0,  ///< No variant selected
        e_Comment,      ///< free text to describe nature of  Update-align
        e_Addthis,      ///< suggestion for inclusion in the CD  without corresponding alignment
        e_Replaces,     ///< if one or several alignment rows are  to be replaced by the Update-align
        e_Reject_loc,   ///< if used with Reject-id, specify a  location on a sequence which should  not be used
        e_Reference     ///< if update alignment imported from  citation and for whenever it seems  necessary to cite
    };
    /// Maximum+1 value of the choice variant enumerator.
    enum E_ChoiceStopper {
        e_MaxChoice = 6 ///< == e_Reference+1
    };

    /// Reset the whole object
    virtual void Reset(void);

    /// Reset the selection (set it to e_not_set).
    virtual void ResetSelection(void);

    /// Which variant is currently selected.
    E_Choice Which(void) const;

    /// Verify selection, throw exception if it differs from the expected.
    void CheckSelected(E_Choice index) const;

    /// Throw 'InvalidSelection' exception.
    NCBI_NORETURN void ThrowInvalidSelection(E_Choice index) const;

    /// Retrieve selection name (for diagnostic purposes).
    static string SelectionName(E_Choice index);

    /// Select the requested variant if needed.
    void Select(E_Choice index, EResetVariant reset = eDoResetVariant);
    /// Select the requested variant if needed,
    /// allocating CObject variants from memory pool.
    void Select(E_Choice index,
                EResetVariant reset,
                CObjectMemoryPool* pool);

    // types
    typedef string TComment;
    typedef CSeq_loc TAddthis;
    typedef CSeq_loc TReplaces;
    typedef CSeq_loc TReject_loc;
    typedef CPub TReference;

    // getters
    // setters

    // typedef string TComment
    bool IsComment(void) const;
    const TComment& GetComment(void) const;
    TComment& SetComment(void);
    void SetComment(const TComment& value);

    // typedef CSeq_loc TAddthis
    bool IsAddthis(void) const;
    const TAddthis& GetAddthis(void) const;
    TAddthis& SetAddthis(void);
    void SetAddthis(TAddthis& value);

    // typedef CSeq_loc TReplaces
    bool IsReplaces(void) const;
    const TReplaces& GetReplaces(void) const;
    TReplaces& SetReplaces(void);
    void SetReplaces(TReplaces& value);

    // typedef CSeq_loc TReject_loc
    bool IsReject_loc(void) const;
    const TReject_loc& GetReject_loc(void) const;
    TReject_loc& SetReject_loc(void);
    void SetReject_loc(TReject_loc& value);

    // typedef CPub TReference
    bool IsReference(void) const;
    const TReference& GetReference(void) const;
    TReference& SetReference(void);
    void SetReference(TReference& value);


private:
    // copy constructor and assignment operator
    CUpdate_comment_Base(const CUpdate_comment_Base& );
    CUpdate_comment_Base& operator=(const CUpdate_comment_Base& );
    // choice state
    E_Choice m_choice;
    // helper methods
    void DoSelect(E_Choice index, CObjectMemoryPool* pool = 0);

    static const char* const sm_SelectionNames[];
    // data
    union {
        NCBI_NS_NCBI::CUnionBuffer<NCBI_NS_STD::string> m_string;
        NCBI_NS_NCBI::CSerialObject *m_object;
    };
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
CUpdate_comment_Base::E_Choice CUpdate_comment_Base::Which(void) const
{
    return m_choice;
}

inline
void CUpdate_comment_Base::CheckSelected(E_Choice index) const
{
    if ( m_choice != index )
        ThrowInvalidSelection(index);
}

inline
void CUpdate_comment_Base::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    if ( reset == NCBI_NS_NCBI::eDoResetVariant || m_choice != index ) {
        if ( m_choice != e_not_set )
            ResetSelection();
        DoSelect(index, pool);
    }
}

inline
void CUpdate_comment_Base::Select(E_Choice index, NCBI_NS_NCBI::EResetVariant reset)
{
    Select(index, reset, 0);
}

inline
bool CUpdate_comment_Base::IsComment(void) const
{
    return m_choice == e_Comment;
}

inline
const CUpdate_comment_Base::TComment& CUpdate_comment_Base::GetComment(void) const
{
    CheckSelected(e_Comment);
    return *m_string;
}

inline
CUpdate_comment_Base::TComment& CUpdate_comment_Base::SetComment(void)
{
    Select(e_Comment, NCBI_NS_NCBI::eDoNotResetVariant);
    return *m_string;
}

inline
bool CUpdate_comment_Base::IsAddthis(void) const
{
    return m_choice == e_Addthis;
}

inline
bool CUpdate_comment_Base::IsReplaces(void) const
{
    return m_choice == e_Replaces;
}

inline
bool CUpdate_comment_Base::IsReject_loc(void) const
{
    return m_choice == e_Reject_loc;
}

inline
bool CUpdate_comment_Base::IsReference(void) const
{
    return m_choice == e_Reference;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_CDD_UPDATE_COMMENT_BASE_HPP
