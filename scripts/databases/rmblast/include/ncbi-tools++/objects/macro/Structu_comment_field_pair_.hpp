/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Structu_comment_field_pair_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'macro.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_MACRO_STRUCTU_COMMENT_FIELD_PAIR_BASE_HPP
#define OBJECTS_MACRO_STRUCTU_COMMENT_FIELD_PAIR_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CStructured_comment_field;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class CStructured_comment_field_pair_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CStructured_comment_field_pair_Base(void);
    // destructor
    virtual ~CStructured_comment_field_pair_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef CStructured_comment_field TFrom;
    typedef CStructured_comment_field TTo;

    // getters
    // setters

    /// mandatory
    /// typedef CStructured_comment_field TFrom
    ///  Check whether the From data member has been assigned a value.
    bool IsSetFrom(void) const;
    /// Check whether it is safe or not to call GetFrom method.
    bool CanGetFrom(void) const;
    void ResetFrom(void);
    const TFrom& GetFrom(void) const;
    void SetFrom(TFrom& value);
    TFrom& SetFrom(void);

    /// mandatory
    /// typedef CStructured_comment_field TTo
    ///  Check whether the To data member has been assigned a value.
    bool IsSetTo(void) const;
    /// Check whether it is safe or not to call GetTo method.
    bool CanGetTo(void) const;
    void ResetTo(void);
    const TTo& GetTo(void) const;
    void SetTo(TTo& value);
    TTo& SetTo(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CStructured_comment_field_pair_Base(const CStructured_comment_field_pair_Base&);
    CStructured_comment_field_pair_Base& operator=(const CStructured_comment_field_pair_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TFrom > m_From;
    CRef< TTo > m_To;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CStructured_comment_field_pair_Base::IsSetFrom(void) const
{
    return m_From.NotEmpty();
}

inline
bool CStructured_comment_field_pair_Base::CanGetFrom(void) const
{
    return true;
}

inline
const CStructured_comment_field_pair_Base::TFrom& CStructured_comment_field_pair_Base::GetFrom(void) const
{
    if ( !m_From ) {
        const_cast<CStructured_comment_field_pair_Base*>(this)->ResetFrom();
    }
    return (*m_From);
}

inline
CStructured_comment_field_pair_Base::TFrom& CStructured_comment_field_pair_Base::SetFrom(void)
{
    if ( !m_From ) {
        ResetFrom();
    }
    return (*m_From);
}

inline
bool CStructured_comment_field_pair_Base::IsSetTo(void) const
{
    return m_To.NotEmpty();
}

inline
bool CStructured_comment_field_pair_Base::CanGetTo(void) const
{
    return true;
}

inline
const CStructured_comment_field_pair_Base::TTo& CStructured_comment_field_pair_Base::GetTo(void) const
{
    if ( !m_To ) {
        const_cast<CStructured_comment_field_pair_Base*>(this)->ResetTo();
    }
    return (*m_To);
}

inline
CStructured_comment_field_pair_Base::TTo& CStructured_comment_field_pair_Base::SetTo(void)
{
    if ( !m_To ) {
        ResetTo();
    }
    return (*m_To);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_MACRO_STRUCTU_COMMENT_FIELD_PAIR_BASE_HPP
