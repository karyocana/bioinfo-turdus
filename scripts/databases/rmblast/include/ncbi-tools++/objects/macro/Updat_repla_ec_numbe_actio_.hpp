/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file Updat_repla_ec_numbe_actio_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'macro.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_MACRO_UPDAT_REPLA_EC_NUMBE_ACTIO_BASE_HPP
#define OBJECTS_MACRO_UPDAT_REPLA_EC_NUMBE_ACTIO_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class CUpdate_replaced_ec_numbers_action_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CUpdate_replaced_ec_numbers_action_Base(void);
    // destructor
    virtual ~CUpdate_replaced_ec_numbers_action_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef bool TDelete_improper_format;
    typedef bool TDelete_unrecognized;
    typedef bool TDelete_multiple_replacement;

    // getters
    // setters

    /// mandatory
    /// typedef bool TDelete_improper_format
    ///  Check whether the Delete_improper_format data member has been assigned a value.
    bool IsSetDelete_improper_format(void) const;
    /// Check whether it is safe or not to call GetDelete_improper_format method.
    bool CanGetDelete_improper_format(void) const;
    void ResetDelete_improper_format(void);
    TDelete_improper_format GetDelete_improper_format(void) const;
    void SetDelete_improper_format(TDelete_improper_format value);
    TDelete_improper_format& SetDelete_improper_format(void);

    /// mandatory
    /// typedef bool TDelete_unrecognized
    ///  Check whether the Delete_unrecognized data member has been assigned a value.
    bool IsSetDelete_unrecognized(void) const;
    /// Check whether it is safe or not to call GetDelete_unrecognized method.
    bool CanGetDelete_unrecognized(void) const;
    void ResetDelete_unrecognized(void);
    TDelete_unrecognized GetDelete_unrecognized(void) const;
    void SetDelete_unrecognized(TDelete_unrecognized value);
    TDelete_unrecognized& SetDelete_unrecognized(void);

    /// mandatory
    /// typedef bool TDelete_multiple_replacement
    ///  Check whether the Delete_multiple_replacement data member has been assigned a value.
    bool IsSetDelete_multiple_replacement(void) const;
    /// Check whether it is safe or not to call GetDelete_multiple_replacement method.
    bool CanGetDelete_multiple_replacement(void) const;
    void ResetDelete_multiple_replacement(void);
    TDelete_multiple_replacement GetDelete_multiple_replacement(void) const;
    void SetDelete_multiple_replacement(TDelete_multiple_replacement value);
    TDelete_multiple_replacement& SetDelete_multiple_replacement(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CUpdate_replaced_ec_numbers_action_Base(const CUpdate_replaced_ec_numbers_action_Base&);
    CUpdate_replaced_ec_numbers_action_Base& operator=(const CUpdate_replaced_ec_numbers_action_Base&);

    // data
    Uint4 m_set_State[1];
    bool m_Delete_improper_format;
    bool m_Delete_unrecognized;
    bool m_Delete_multiple_replacement;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CUpdate_replaced_ec_numbers_action_Base::IsSetDelete_improper_format(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CUpdate_replaced_ec_numbers_action_Base::CanGetDelete_improper_format(void) const
{
    return IsSetDelete_improper_format();
}

inline
void CUpdate_replaced_ec_numbers_action_Base::ResetDelete_improper_format(void)
{
    m_Delete_improper_format = 0;
    m_set_State[0] &= ~0x3;
}

inline
CUpdate_replaced_ec_numbers_action_Base::TDelete_improper_format CUpdate_replaced_ec_numbers_action_Base::GetDelete_improper_format(void) const
{
    if (!CanGetDelete_improper_format()) {
        ThrowUnassigned(0);
    }
    return m_Delete_improper_format;
}

inline
void CUpdate_replaced_ec_numbers_action_Base::SetDelete_improper_format(CUpdate_replaced_ec_numbers_action_Base::TDelete_improper_format value)
{
    m_Delete_improper_format = value;
    m_set_State[0] |= 0x3;
}

inline
CUpdate_replaced_ec_numbers_action_Base::TDelete_improper_format& CUpdate_replaced_ec_numbers_action_Base::SetDelete_improper_format(void)
{
#ifdef _DEBUG
    if (!IsSetDelete_improper_format()) {
        memset(&m_Delete_improper_format,UnassignedByte(),sizeof(m_Delete_improper_format));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Delete_improper_format;
}

inline
bool CUpdate_replaced_ec_numbers_action_Base::IsSetDelete_unrecognized(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CUpdate_replaced_ec_numbers_action_Base::CanGetDelete_unrecognized(void) const
{
    return IsSetDelete_unrecognized();
}

inline
void CUpdate_replaced_ec_numbers_action_Base::ResetDelete_unrecognized(void)
{
    m_Delete_unrecognized = 0;
    m_set_State[0] &= ~0xc;
}

inline
CUpdate_replaced_ec_numbers_action_Base::TDelete_unrecognized CUpdate_replaced_ec_numbers_action_Base::GetDelete_unrecognized(void) const
{
    if (!CanGetDelete_unrecognized()) {
        ThrowUnassigned(1);
    }
    return m_Delete_unrecognized;
}

inline
void CUpdate_replaced_ec_numbers_action_Base::SetDelete_unrecognized(CUpdate_replaced_ec_numbers_action_Base::TDelete_unrecognized value)
{
    m_Delete_unrecognized = value;
    m_set_State[0] |= 0xc;
}

inline
CUpdate_replaced_ec_numbers_action_Base::TDelete_unrecognized& CUpdate_replaced_ec_numbers_action_Base::SetDelete_unrecognized(void)
{
#ifdef _DEBUG
    if (!IsSetDelete_unrecognized()) {
        memset(&m_Delete_unrecognized,UnassignedByte(),sizeof(m_Delete_unrecognized));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Delete_unrecognized;
}

inline
bool CUpdate_replaced_ec_numbers_action_Base::IsSetDelete_multiple_replacement(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CUpdate_replaced_ec_numbers_action_Base::CanGetDelete_multiple_replacement(void) const
{
    return IsSetDelete_multiple_replacement();
}

inline
void CUpdate_replaced_ec_numbers_action_Base::ResetDelete_multiple_replacement(void)
{
    m_Delete_multiple_replacement = 0;
    m_set_State[0] &= ~0x30;
}

inline
CUpdate_replaced_ec_numbers_action_Base::TDelete_multiple_replacement CUpdate_replaced_ec_numbers_action_Base::GetDelete_multiple_replacement(void) const
{
    if (!CanGetDelete_multiple_replacement()) {
        ThrowUnassigned(2);
    }
    return m_Delete_multiple_replacement;
}

inline
void CUpdate_replaced_ec_numbers_action_Base::SetDelete_multiple_replacement(CUpdate_replaced_ec_numbers_action_Base::TDelete_multiple_replacement value)
{
    m_Delete_multiple_replacement = value;
    m_set_State[0] |= 0x30;
}

inline
CUpdate_replaced_ec_numbers_action_Base::TDelete_multiple_replacement& CUpdate_replaced_ec_numbers_action_Base::SetDelete_multiple_replacement(void)
{
#ifdef _DEBUG
    if (!IsSetDelete_multiple_replacement()) {
        memset(&m_Delete_multiple_replacement,UnassignedByte(),sizeof(m_Delete_multiple_replacement));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Delete_multiple_replacement;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_MACRO_UPDAT_REPLA_EC_NUMBE_ACTIO_BASE_HPP
