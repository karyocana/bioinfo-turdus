/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file TMgr_DisplayTrackRequest_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'trackmgr.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_TRACKMGR_TMGR_DISPLAYTRACKREQUEST_BASE_HPP
#define OBJECTS_TRACKMGR_TMGR_DISPLAYTRACKREQUEST_BASE_HPP

// extra headers
#include <objects/trackmgr/trackmgr_export.h>

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// forward declarations
class CTMgr_AttrSpec;
class CTMgr_ClientInfo;
class CTMgr_GenomeContext;
class CTMgr_Identity;
class CTMgr_TrackACL_Authorization;


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_TRACKMGR_EXPORT CTMgr_DisplayTrackRequest_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CTMgr_DisplayTrackRequest_Base(void);
    // destructor
    virtual ~CTMgr_DisplayTrackRequest_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    /////////////////////////////////////////////////////////////////////////////
    class NCBI_TRACKMGR_EXPORT C_Flags : public CSerialObject
    {
        typedef CSerialObject Tparent;
    public:
        // constructor
        C_Flags(void);
        // destructor
        ~C_Flags(void);
    
        // type info
        DECLARE_INTERNAL_TYPE_INFO();
    
        // types
        typedef bool TInclude_stats;
        typedef bool TInclude_default_tracks;
        typedef bool TInclude_track_items;
    
        // getters
        // setters
    
        /// optional with default false
        /// typedef bool TInclude_stats
        ///  Check whether the Include_stats data member has been assigned a value.
        bool IsSetInclude_stats(void) const;
        /// Check whether it is safe or not to call GetInclude_stats method.
        bool CanGetInclude_stats(void) const;
        void ResetInclude_stats(void);
        void SetDefaultInclude_stats(void);
        TInclude_stats GetInclude_stats(void) const;
        void SetInclude_stats(TInclude_stats value);
        TInclude_stats& SetInclude_stats(void);
    
        /// optional
        /// typedef bool TInclude_default_tracks
        ///  Check whether the Include_default_tracks data member has been assigned a value.
        bool IsSetInclude_default_tracks(void) const;
        /// Check whether it is safe or not to call GetInclude_default_tracks method.
        bool CanGetInclude_default_tracks(void) const;
        void ResetInclude_default_tracks(void);
        TInclude_default_tracks GetInclude_default_tracks(void) const;
        void SetInclude_default_tracks(TInclude_default_tracks value);
        TInclude_default_tracks& SetInclude_default_tracks(void);
    
        /// optional with default false
        /// typedef bool TInclude_track_items
        ///  Check whether the Include_track_items data member has been assigned a value.
        bool IsSetInclude_track_items(void) const;
        /// Check whether it is safe or not to call GetInclude_track_items method.
        bool CanGetInclude_track_items(void) const;
        void ResetInclude_track_items(void);
        void SetDefaultInclude_track_items(void);
        TInclude_track_items GetInclude_track_items(void) const;
        void SetInclude_track_items(TInclude_track_items value);
        TInclude_track_items& SetInclude_track_items(void);
    
        /// Reset the whole object
        void Reset(void);
    
    
    private:
        // Prohibit copy constructor and assignment operator
        C_Flags(const C_Flags&);
        C_Flags& operator=(const C_Flags&);
    
        // data
        Uint4 m_set_State[1];
        bool m_Include_stats;
        bool m_Include_default_tracks;
        bool m_Include_track_items;
    };
    // types
    typedef CTMgr_ClientInfo TClient;
    typedef CTMgr_GenomeContext TGenome_context;
    typedef list< CRef< CTMgr_AttrSpec > > TAttrs;
    typedef CTMgr_Identity TIdentity;
    typedef CTMgr_TrackACL_Authorization TAuthorization;
    typedef C_Flags TFlags;

    // getters
    // setters

    /// mandatory
    /// typedef CTMgr_ClientInfo TClient
    ///  Check whether the Client data member has been assigned a value.
    bool IsSetClient(void) const;
    /// Check whether it is safe or not to call GetClient method.
    bool CanGetClient(void) const;
    void ResetClient(void);
    const TClient& GetClient(void) const;
    void SetClient(TClient& value);
    TClient& SetClient(void);

    /// mandatory
    /// typedef CTMgr_GenomeContext TGenome_context
    ///  Check whether the Genome_context data member has been assigned a value.
    bool IsSetGenome_context(void) const;
    /// Check whether it is safe or not to call GetGenome_context method.
    bool CanGetGenome_context(void) const;
    void ResetGenome_context(void);
    const TGenome_context& GetGenome_context(void) const;
    void SetGenome_context(TGenome_context& value);
    TGenome_context& SetGenome_context(void);

    /// optional
    /// typedef list< CRef< CTMgr_AttrSpec > > TAttrs
    ///  Check whether the Attrs data member has been assigned a value.
    bool IsSetAttrs(void) const;
    /// Check whether it is safe or not to call GetAttrs method.
    bool CanGetAttrs(void) const;
    void ResetAttrs(void);
    const TAttrs& GetAttrs(void) const;
    TAttrs& SetAttrs(void);

    /// optional
    /// typedef CTMgr_Identity TIdentity
    ///  Check whether the Identity data member has been assigned a value.
    bool IsSetIdentity(void) const;
    /// Check whether it is safe or not to call GetIdentity method.
    bool CanGetIdentity(void) const;
    void ResetIdentity(void);
    const TIdentity& GetIdentity(void) const;
    void SetIdentity(TIdentity& value);
    TIdentity& SetIdentity(void);

    /// optional
    /// typedef CTMgr_TrackACL_Authorization TAuthorization
    ///  Check whether the Authorization data member has been assigned a value.
    bool IsSetAuthorization(void) const;
    /// Check whether it is safe or not to call GetAuthorization method.
    bool CanGetAuthorization(void) const;
    void ResetAuthorization(void);
    const TAuthorization& GetAuthorization(void) const;
    void SetAuthorization(TAuthorization& value);
    TAuthorization& SetAuthorization(void);

    /// optional
    /// typedef C_Flags TFlags
    ///  Check whether the Flags data member has been assigned a value.
    bool IsSetFlags(void) const;
    /// Check whether it is safe or not to call GetFlags method.
    bool CanGetFlags(void) const;
    void ResetFlags(void);
    const TFlags& GetFlags(void) const;
    void SetFlags(TFlags& value);
    TFlags& SetFlags(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CTMgr_DisplayTrackRequest_Base(const CTMgr_DisplayTrackRequest_Base&);
    CTMgr_DisplayTrackRequest_Base& operator=(const CTMgr_DisplayTrackRequest_Base&);

    // data
    Uint4 m_set_State[1];
    CRef< TClient > m_Client;
    CRef< TGenome_context > m_Genome_context;
    list< CRef< CTMgr_AttrSpec > > m_Attrs;
    CRef< TIdentity > m_Identity;
    CRef< TAuthorization > m_Authorization;
    CRef< TFlags > m_Flags;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CTMgr_DisplayTrackRequest_Base::C_Flags::IsSetInclude_stats(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CTMgr_DisplayTrackRequest_Base::C_Flags::CanGetInclude_stats(void) const
{
    return true;
}

inline
void CTMgr_DisplayTrackRequest_Base::C_Flags::ResetInclude_stats(void)
{
    m_Include_stats = false;
    m_set_State[0] &= ~0x3;
}

inline
void CTMgr_DisplayTrackRequest_Base::C_Flags::SetDefaultInclude_stats(void)
{
    ResetInclude_stats();
}

inline
CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_stats CTMgr_DisplayTrackRequest_Base::C_Flags::GetInclude_stats(void) const
{
    return m_Include_stats;
}

inline
void CTMgr_DisplayTrackRequest_Base::C_Flags::SetInclude_stats(CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_stats value)
{
    m_Include_stats = value;
    m_set_State[0] |= 0x3;
}

inline
CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_stats& CTMgr_DisplayTrackRequest_Base::C_Flags::SetInclude_stats(void)
{
#ifdef _DEBUG
    if (!IsSetInclude_stats()) {
        memset(&m_Include_stats,UnassignedByte(),sizeof(m_Include_stats));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Include_stats;
}

inline
bool CTMgr_DisplayTrackRequest_Base::C_Flags::IsSetInclude_default_tracks(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CTMgr_DisplayTrackRequest_Base::C_Flags::CanGetInclude_default_tracks(void) const
{
    return IsSetInclude_default_tracks();
}

inline
void CTMgr_DisplayTrackRequest_Base::C_Flags::ResetInclude_default_tracks(void)
{
    m_Include_default_tracks = 0;
    m_set_State[0] &= ~0xc;
}

inline
CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_default_tracks CTMgr_DisplayTrackRequest_Base::C_Flags::GetInclude_default_tracks(void) const
{
    if (!CanGetInclude_default_tracks()) {
        ThrowUnassigned(1);
    }
    return m_Include_default_tracks;
}

inline
void CTMgr_DisplayTrackRequest_Base::C_Flags::SetInclude_default_tracks(CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_default_tracks value)
{
    m_Include_default_tracks = value;
    m_set_State[0] |= 0xc;
}

inline
CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_default_tracks& CTMgr_DisplayTrackRequest_Base::C_Flags::SetInclude_default_tracks(void)
{
#ifdef _DEBUG
    if (!IsSetInclude_default_tracks()) {
        memset(&m_Include_default_tracks,UnassignedByte(),sizeof(m_Include_default_tracks));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Include_default_tracks;
}

inline
bool CTMgr_DisplayTrackRequest_Base::C_Flags::IsSetInclude_track_items(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CTMgr_DisplayTrackRequest_Base::C_Flags::CanGetInclude_track_items(void) const
{
    return true;
}

inline
void CTMgr_DisplayTrackRequest_Base::C_Flags::ResetInclude_track_items(void)
{
    m_Include_track_items = false;
    m_set_State[0] &= ~0x30;
}

inline
void CTMgr_DisplayTrackRequest_Base::C_Flags::SetDefaultInclude_track_items(void)
{
    ResetInclude_track_items();
}

inline
CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_track_items CTMgr_DisplayTrackRequest_Base::C_Flags::GetInclude_track_items(void) const
{
    return m_Include_track_items;
}

inline
void CTMgr_DisplayTrackRequest_Base::C_Flags::SetInclude_track_items(CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_track_items value)
{
    m_Include_track_items = value;
    m_set_State[0] |= 0x30;
}

inline
CTMgr_DisplayTrackRequest_Base::C_Flags::TInclude_track_items& CTMgr_DisplayTrackRequest_Base::C_Flags::SetInclude_track_items(void)
{
#ifdef _DEBUG
    if (!IsSetInclude_track_items()) {
        memset(&m_Include_track_items,UnassignedByte(),sizeof(m_Include_track_items));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Include_track_items;
}

inline
bool CTMgr_DisplayTrackRequest_Base::IsSetClient(void) const
{
    return m_Client.NotEmpty();
}

inline
bool CTMgr_DisplayTrackRequest_Base::CanGetClient(void) const
{
    return true;
}

inline
const CTMgr_DisplayTrackRequest_Base::TClient& CTMgr_DisplayTrackRequest_Base::GetClient(void) const
{
    if ( !m_Client ) {
        const_cast<CTMgr_DisplayTrackRequest_Base*>(this)->ResetClient();
    }
    return (*m_Client);
}

inline
CTMgr_DisplayTrackRequest_Base::TClient& CTMgr_DisplayTrackRequest_Base::SetClient(void)
{
    if ( !m_Client ) {
        ResetClient();
    }
    return (*m_Client);
}

inline
bool CTMgr_DisplayTrackRequest_Base::IsSetGenome_context(void) const
{
    return m_Genome_context.NotEmpty();
}

inline
bool CTMgr_DisplayTrackRequest_Base::CanGetGenome_context(void) const
{
    return true;
}

inline
const CTMgr_DisplayTrackRequest_Base::TGenome_context& CTMgr_DisplayTrackRequest_Base::GetGenome_context(void) const
{
    if ( !m_Genome_context ) {
        const_cast<CTMgr_DisplayTrackRequest_Base*>(this)->ResetGenome_context();
    }
    return (*m_Genome_context);
}

inline
CTMgr_DisplayTrackRequest_Base::TGenome_context& CTMgr_DisplayTrackRequest_Base::SetGenome_context(void)
{
    if ( !m_Genome_context ) {
        ResetGenome_context();
    }
    return (*m_Genome_context);
}

inline
bool CTMgr_DisplayTrackRequest_Base::IsSetAttrs(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CTMgr_DisplayTrackRequest_Base::CanGetAttrs(void) const
{
    return true;
}

inline
const CTMgr_DisplayTrackRequest_Base::TAttrs& CTMgr_DisplayTrackRequest_Base::GetAttrs(void) const
{
    return m_Attrs;
}

inline
CTMgr_DisplayTrackRequest_Base::TAttrs& CTMgr_DisplayTrackRequest_Base::SetAttrs(void)
{
    m_set_State[0] |= 0x10;
    return m_Attrs;
}

inline
bool CTMgr_DisplayTrackRequest_Base::IsSetIdentity(void) const
{
    return m_Identity.NotEmpty();
}

inline
bool CTMgr_DisplayTrackRequest_Base::CanGetIdentity(void) const
{
    return IsSetIdentity();
}

inline
const CTMgr_DisplayTrackRequest_Base::TIdentity& CTMgr_DisplayTrackRequest_Base::GetIdentity(void) const
{
    if (!CanGetIdentity()) {
        ThrowUnassigned(3);
    }
    return (*m_Identity);
}

inline
bool CTMgr_DisplayTrackRequest_Base::IsSetAuthorization(void) const
{
    return m_Authorization.NotEmpty();
}

inline
bool CTMgr_DisplayTrackRequest_Base::CanGetAuthorization(void) const
{
    return IsSetAuthorization();
}

inline
const CTMgr_DisplayTrackRequest_Base::TAuthorization& CTMgr_DisplayTrackRequest_Base::GetAuthorization(void) const
{
    if (!CanGetAuthorization()) {
        ThrowUnassigned(4);
    }
    return (*m_Authorization);
}

inline
bool CTMgr_DisplayTrackRequest_Base::IsSetFlags(void) const
{
    return m_Flags.NotEmpty();
}

inline
bool CTMgr_DisplayTrackRequest_Base::CanGetFlags(void) const
{
    return IsSetFlags();
}

inline
const CTMgr_DisplayTrackRequest_Base::TFlags& CTMgr_DisplayTrackRequest_Base::GetFlags(void) const
{
    if (!CanGetFlags()) {
        ThrowUnassigned(5);
    }
    return (*m_Flags);
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_TRACKMGR_TMGR_DISPLAYTRACKREQUEST_BASE_HPP
