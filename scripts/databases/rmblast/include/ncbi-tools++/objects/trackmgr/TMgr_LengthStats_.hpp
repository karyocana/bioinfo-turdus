/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file TMgr_LengthStats_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'trackmgr.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_TRACKMGR_TMGR_LENGTHSTATS_BASE_HPP
#define OBJECTS_TRACKMGR_TMGR_LENGTHSTATS_BASE_HPP

// extra headers
#include <objects/trackmgr/trackmgr_export.h>

// standard includes
#include <serial/serialbase.hpp>
BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class NCBI_TRACKMGR_EXPORT CTMgr_LengthStats_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CTMgr_LengthStats_Base(void);
    // destructor
    virtual ~CTMgr_LengthStats_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef TSeqPos TMin;
    typedef TSeqPos TMax;
    typedef TSeqPos TMean;

    // getters
    // setters

    /// mandatory
    /// typedef TSeqPos TMin
    ///  Check whether the Min data member has been assigned a value.
    bool IsSetMin(void) const;
    /// Check whether it is safe or not to call GetMin method.
    bool CanGetMin(void) const;
    void ResetMin(void);
    TMin GetMin(void) const;
    void SetMin(TMin value);
    TMin& SetMin(void);

    /// mandatory
    /// typedef TSeqPos TMax
    ///  Check whether the Max data member has been assigned a value.
    bool IsSetMax(void) const;
    /// Check whether it is safe or not to call GetMax method.
    bool CanGetMax(void) const;
    void ResetMax(void);
    TMax GetMax(void) const;
    void SetMax(TMax value);
    TMax& SetMax(void);

    /// optional
    /// typedef TSeqPos TMean
    ///  Check whether the Mean data member has been assigned a value.
    bool IsSetMean(void) const;
    /// Check whether it is safe or not to call GetMean method.
    bool CanGetMean(void) const;
    void ResetMean(void);
    TMean GetMean(void) const;
    void SetMean(TMean value);
    TMean& SetMean(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CTMgr_LengthStats_Base(const CTMgr_LengthStats_Base&);
    CTMgr_LengthStats_Base& operator=(const CTMgr_LengthStats_Base&);

    // data
    Uint4 m_set_State[1];
    TSeqPos m_Min;
    TSeqPos m_Max;
    TSeqPos m_Mean;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CTMgr_LengthStats_Base::IsSetMin(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CTMgr_LengthStats_Base::CanGetMin(void) const
{
    return IsSetMin();
}

inline
void CTMgr_LengthStats_Base::ResetMin(void)
{
    m_Min = 0;
    m_set_State[0] &= ~0x3;
}

inline
CTMgr_LengthStats_Base::TMin CTMgr_LengthStats_Base::GetMin(void) const
{
    if (!CanGetMin()) {
        ThrowUnassigned(0);
    }
    return m_Min;
}

inline
void CTMgr_LengthStats_Base::SetMin(CTMgr_LengthStats_Base::TMin value)
{
    m_Min = value;
    m_set_State[0] |= 0x3;
}

inline
CTMgr_LengthStats_Base::TMin& CTMgr_LengthStats_Base::SetMin(void)
{
#ifdef _DEBUG
    if (!IsSetMin()) {
        memset(&m_Min,UnassignedByte(),sizeof(m_Min));
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Min;
}

inline
bool CTMgr_LengthStats_Base::IsSetMax(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CTMgr_LengthStats_Base::CanGetMax(void) const
{
    return IsSetMax();
}

inline
void CTMgr_LengthStats_Base::ResetMax(void)
{
    m_Max = 0;
    m_set_State[0] &= ~0xc;
}

inline
CTMgr_LengthStats_Base::TMax CTMgr_LengthStats_Base::GetMax(void) const
{
    if (!CanGetMax()) {
        ThrowUnassigned(1);
    }
    return m_Max;
}

inline
void CTMgr_LengthStats_Base::SetMax(CTMgr_LengthStats_Base::TMax value)
{
    m_Max = value;
    m_set_State[0] |= 0xc;
}

inline
CTMgr_LengthStats_Base::TMax& CTMgr_LengthStats_Base::SetMax(void)
{
#ifdef _DEBUG
    if (!IsSetMax()) {
        memset(&m_Max,UnassignedByte(),sizeof(m_Max));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Max;
}

inline
bool CTMgr_LengthStats_Base::IsSetMean(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CTMgr_LengthStats_Base::CanGetMean(void) const
{
    return IsSetMean();
}

inline
void CTMgr_LengthStats_Base::ResetMean(void)
{
    m_Mean = 0;
    m_set_State[0] &= ~0x30;
}

inline
CTMgr_LengthStats_Base::TMean CTMgr_LengthStats_Base::GetMean(void) const
{
    if (!CanGetMean()) {
        ThrowUnassigned(2);
    }
    return m_Mean;
}

inline
void CTMgr_LengthStats_Base::SetMean(CTMgr_LengthStats_Base::TMean value)
{
    m_Mean = value;
    m_set_State[0] |= 0x30;
}

inline
CTMgr_LengthStats_Base::TMean& CTMgr_LengthStats_Base::SetMean(void)
{
#ifdef _DEBUG
    if (!IsSetMean()) {
        memset(&m_Mean,UnassignedByte(),sizeof(m_Mean));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Mean;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_TRACKMGR_TMGR_LENGTHSTATS_BASE_HPP
