/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file GCClient_GetAssemblyReques_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'gencoll_client.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_GENOMECOLL_GCCLIENT_GETASSEMBLYREQUES_BASE_HPP
#define OBJECTS_GENOMECOLL_GCCLIENT_GETASSEMBLYREQUES_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <string>
#include <objects/genomecoll/GCClient_AttributeFlags.hpp>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class CGCClient_GetAssemblyRequest_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CGCClient_GetAssemblyRequest_Base(void);
    // destructor
    virtual ~CGCClient_GetAssemblyRequest_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    enum ELevel {
        eLevel_assembly  = 0,
        eLevel_replicon  = 1,
        eLevel_scaffold  = 2,
        eLevel_component = 3
    };
    
    /// Access to ELevel's attributes (values, names) as defined in spec
    static const NCBI_NS_NCBI::CEnumeratedTypeValues* ENUM_METHOD_NAME(ELevel)(void);
    
    // types
    typedef string TAccession;
    typedef int TRelease_id;
    typedef int TLevel;
    typedef int TAssm_flags;
    typedef int TChrom_flags;
    typedef int TScaf_flags;
    typedef int TComponent_flags;

    // getters
    // setters

    /// One of accession or release id MUST BE SUPPLIED
    /// Assembly accession or accession.version
    /// (versionless accession is answered with most recent version)
    /// optional
    /// typedef string TAccession
    ///  Check whether the Accession data member has been assigned a value.
    bool IsSetAccession(void) const;
    /// Check whether it is safe or not to call GetAccession method.
    bool CanGetAccession(void) const;
    void ResetAccession(void);
    const TAccession& GetAccession(void) const;
    void SetAccession(const TAccession& value);
    TAccession& SetAccession(void);

    /// release ID
    /// optional
    /// typedef int TRelease_id
    ///  Check whether the Release_id data member has been assigned a value.
    bool IsSetRelease_id(void) const;
    /// Check whether it is safe or not to call GetRelease_id method.
    bool CanGetRelease_id(void) const;
    void ResetRelease_id(void);
    TRelease_id GetRelease_id(void) const;
    void SetRelease_id(TRelease_id value);
    TRelease_id& SetRelease_id(void);

    /// optional with default eLevel_scaffold
    /// typedef int TLevel
    ///  Check whether the Level data member has been assigned a value.
    bool IsSetLevel(void) const;
    /// Check whether it is safe or not to call GetLevel method.
    bool CanGetLevel(void) const;
    void ResetLevel(void);
    void SetDefaultLevel(void);
    TLevel GetLevel(void) const;
    void SetLevel(TLevel value);
    TLevel& SetLevel(void);

    /// assm-flags, chrom-flags, scaf-flags, component-flags
    /// optional with default eGCClient_AttributeFlags_none
    /// typedef int TAssm_flags
    ///  Check whether the Assm_flags data member has been assigned a value.
    bool IsSetAssm_flags(void) const;
    /// Check whether it is safe or not to call GetAssm_flags method.
    bool CanGetAssm_flags(void) const;
    void ResetAssm_flags(void);
    void SetDefaultAssm_flags(void);
    TAssm_flags GetAssm_flags(void) const;
    void SetAssm_flags(TAssm_flags value);
    TAssm_flags& SetAssm_flags(void);

    /// optional with default eGCClient_AttributeFlags_biosource
    /// typedef int TChrom_flags
    ///  Check whether the Chrom_flags data member has been assigned a value.
    bool IsSetChrom_flags(void) const;
    /// Check whether it is safe or not to call GetChrom_flags method.
    bool CanGetChrom_flags(void) const;
    void ResetChrom_flags(void);
    void SetDefaultChrom_flags(void);
    TChrom_flags GetChrom_flags(void) const;
    void SetChrom_flags(TChrom_flags value);
    TChrom_flags& SetChrom_flags(void);

    /// optional with default eGCClient_AttributeFlags_none
    /// typedef int TScaf_flags
    ///  Check whether the Scaf_flags data member has been assigned a value.
    bool IsSetScaf_flags(void) const;
    /// Check whether it is safe or not to call GetScaf_flags method.
    bool CanGetScaf_flags(void) const;
    void ResetScaf_flags(void);
    void SetDefaultScaf_flags(void);
    TScaf_flags GetScaf_flags(void) const;
    void SetScaf_flags(TScaf_flags value);
    TScaf_flags& SetScaf_flags(void);

    /// optional with default eGCClient_AttributeFlags_none
    /// typedef int TComponent_flags
    ///  Check whether the Component_flags data member has been assigned a value.
    bool IsSetComponent_flags(void) const;
    /// Check whether it is safe or not to call GetComponent_flags method.
    bool CanGetComponent_flags(void) const;
    void ResetComponent_flags(void);
    void SetDefaultComponent_flags(void);
    TComponent_flags GetComponent_flags(void) const;
    void SetComponent_flags(TComponent_flags value);
    TComponent_flags& SetComponent_flags(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CGCClient_GetAssemblyRequest_Base(const CGCClient_GetAssemblyRequest_Base&);
    CGCClient_GetAssemblyRequest_Base& operator=(const CGCClient_GetAssemblyRequest_Base&);

    // data
    Uint4 m_set_State[1];
    string m_Accession;
    int m_Release_id;
    int m_Level;
    int m_Assm_flags;
    int m_Chrom_flags;
    int m_Scaf_flags;
    int m_Component_flags;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CGCClient_GetAssemblyRequest_Base::IsSetAccession(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CGCClient_GetAssemblyRequest_Base::CanGetAccession(void) const
{
    return IsSetAccession();
}

inline
const CGCClient_GetAssemblyRequest_Base::TAccession& CGCClient_GetAssemblyRequest_Base::GetAccession(void) const
{
    if (!CanGetAccession()) {
        ThrowUnassigned(0);
    }
    return m_Accession;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetAccession(const CGCClient_GetAssemblyRequest_Base::TAccession& value)
{
    m_Accession = value;
    m_set_State[0] |= 0x3;
}

inline
CGCClient_GetAssemblyRequest_Base::TAccession& CGCClient_GetAssemblyRequest_Base::SetAccession(void)
{
#ifdef _DEBUG
    if (!IsSetAccession()) {
        m_Accession = UnassignedString();
    }
#endif
    m_set_State[0] |= 0x1;
    return m_Accession;
}

inline
bool CGCClient_GetAssemblyRequest_Base::IsSetRelease_id(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CGCClient_GetAssemblyRequest_Base::CanGetRelease_id(void) const
{
    return IsSetRelease_id();
}

inline
void CGCClient_GetAssemblyRequest_Base::ResetRelease_id(void)
{
    m_Release_id = 0;
    m_set_State[0] &= ~0xc;
}

inline
CGCClient_GetAssemblyRequest_Base::TRelease_id CGCClient_GetAssemblyRequest_Base::GetRelease_id(void) const
{
    if (!CanGetRelease_id()) {
        ThrowUnassigned(1);
    }
    return m_Release_id;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetRelease_id(CGCClient_GetAssemblyRequest_Base::TRelease_id value)
{
    m_Release_id = value;
    m_set_State[0] |= 0xc;
}

inline
CGCClient_GetAssemblyRequest_Base::TRelease_id& CGCClient_GetAssemblyRequest_Base::SetRelease_id(void)
{
#ifdef _DEBUG
    if (!IsSetRelease_id()) {
        memset(&m_Release_id,UnassignedByte(),sizeof(m_Release_id));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Release_id;
}

inline
bool CGCClient_GetAssemblyRequest_Base::IsSetLevel(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CGCClient_GetAssemblyRequest_Base::CanGetLevel(void) const
{
    return true;
}

inline
void CGCClient_GetAssemblyRequest_Base::ResetLevel(void)
{
    m_Level = eLevel_scaffold;
    m_set_State[0] &= ~0x30;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetDefaultLevel(void)
{
    ResetLevel();
}

inline
CGCClient_GetAssemblyRequest_Base::TLevel CGCClient_GetAssemblyRequest_Base::GetLevel(void) const
{
    return m_Level;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetLevel(CGCClient_GetAssemblyRequest_Base::TLevel value)
{
    m_Level = value;
    m_set_State[0] |= 0x30;
}

inline
CGCClient_GetAssemblyRequest_Base::TLevel& CGCClient_GetAssemblyRequest_Base::SetLevel(void)
{
#ifdef _DEBUG
    if (!IsSetLevel()) {
        memset(&m_Level,UnassignedByte(),sizeof(m_Level));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Level;
}

inline
bool CGCClient_GetAssemblyRequest_Base::IsSetAssm_flags(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CGCClient_GetAssemblyRequest_Base::CanGetAssm_flags(void) const
{
    return true;
}

inline
void CGCClient_GetAssemblyRequest_Base::ResetAssm_flags(void)
{
    m_Assm_flags = eGCClient_AttributeFlags_none;
    m_set_State[0] &= ~0xc0;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetDefaultAssm_flags(void)
{
    ResetAssm_flags();
}

inline
CGCClient_GetAssemblyRequest_Base::TAssm_flags CGCClient_GetAssemblyRequest_Base::GetAssm_flags(void) const
{
    return m_Assm_flags;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetAssm_flags(CGCClient_GetAssemblyRequest_Base::TAssm_flags value)
{
    m_Assm_flags = value;
    m_set_State[0] |= 0xc0;
}

inline
CGCClient_GetAssemblyRequest_Base::TAssm_flags& CGCClient_GetAssemblyRequest_Base::SetAssm_flags(void)
{
#ifdef _DEBUG
    if (!IsSetAssm_flags()) {
        memset(&m_Assm_flags,UnassignedByte(),sizeof(m_Assm_flags));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Assm_flags;
}

inline
bool CGCClient_GetAssemblyRequest_Base::IsSetChrom_flags(void) const
{
    return ((m_set_State[0] & 0x300) != 0);
}

inline
bool CGCClient_GetAssemblyRequest_Base::CanGetChrom_flags(void) const
{
    return true;
}

inline
void CGCClient_GetAssemblyRequest_Base::ResetChrom_flags(void)
{
    m_Chrom_flags = eGCClient_AttributeFlags_biosource;
    m_set_State[0] &= ~0x300;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetDefaultChrom_flags(void)
{
    ResetChrom_flags();
}

inline
CGCClient_GetAssemblyRequest_Base::TChrom_flags CGCClient_GetAssemblyRequest_Base::GetChrom_flags(void) const
{
    return m_Chrom_flags;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetChrom_flags(CGCClient_GetAssemblyRequest_Base::TChrom_flags value)
{
    m_Chrom_flags = value;
    m_set_State[0] |= 0x300;
}

inline
CGCClient_GetAssemblyRequest_Base::TChrom_flags& CGCClient_GetAssemblyRequest_Base::SetChrom_flags(void)
{
#ifdef _DEBUG
    if (!IsSetChrom_flags()) {
        memset(&m_Chrom_flags,UnassignedByte(),sizeof(m_Chrom_flags));
    }
#endif
    m_set_State[0] |= 0x100;
    return m_Chrom_flags;
}

inline
bool CGCClient_GetAssemblyRequest_Base::IsSetScaf_flags(void) const
{
    return ((m_set_State[0] & 0xc00) != 0);
}

inline
bool CGCClient_GetAssemblyRequest_Base::CanGetScaf_flags(void) const
{
    return true;
}

inline
void CGCClient_GetAssemblyRequest_Base::ResetScaf_flags(void)
{
    m_Scaf_flags = eGCClient_AttributeFlags_none;
    m_set_State[0] &= ~0xc00;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetDefaultScaf_flags(void)
{
    ResetScaf_flags();
}

inline
CGCClient_GetAssemblyRequest_Base::TScaf_flags CGCClient_GetAssemblyRequest_Base::GetScaf_flags(void) const
{
    return m_Scaf_flags;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetScaf_flags(CGCClient_GetAssemblyRequest_Base::TScaf_flags value)
{
    m_Scaf_flags = value;
    m_set_State[0] |= 0xc00;
}

inline
CGCClient_GetAssemblyRequest_Base::TScaf_flags& CGCClient_GetAssemblyRequest_Base::SetScaf_flags(void)
{
#ifdef _DEBUG
    if (!IsSetScaf_flags()) {
        memset(&m_Scaf_flags,UnassignedByte(),sizeof(m_Scaf_flags));
    }
#endif
    m_set_State[0] |= 0x400;
    return m_Scaf_flags;
}

inline
bool CGCClient_GetAssemblyRequest_Base::IsSetComponent_flags(void) const
{
    return ((m_set_State[0] & 0x3000) != 0);
}

inline
bool CGCClient_GetAssemblyRequest_Base::CanGetComponent_flags(void) const
{
    return true;
}

inline
void CGCClient_GetAssemblyRequest_Base::ResetComponent_flags(void)
{
    m_Component_flags = eGCClient_AttributeFlags_none;
    m_set_State[0] &= ~0x3000;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetDefaultComponent_flags(void)
{
    ResetComponent_flags();
}

inline
CGCClient_GetAssemblyRequest_Base::TComponent_flags CGCClient_GetAssemblyRequest_Base::GetComponent_flags(void) const
{
    return m_Component_flags;
}

inline
void CGCClient_GetAssemblyRequest_Base::SetComponent_flags(CGCClient_GetAssemblyRequest_Base::TComponent_flags value)
{
    m_Component_flags = value;
    m_set_State[0] |= 0x3000;
}

inline
CGCClient_GetAssemblyRequest_Base::TComponent_flags& CGCClient_GetAssemblyRequest_Base::SetComponent_flags(void)
{
#ifdef _DEBUG
    if (!IsSetComponent_flags()) {
        memset(&m_Component_flags,UnassignedByte(),sizeof(m_Component_flags));
    }
#endif
    m_set_State[0] |= 0x1000;
    return m_Component_flags;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_GENOMECOLL_GCCLIENT_GETASSEMBLYREQUES_BASE_HPP
