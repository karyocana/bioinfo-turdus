/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 */

/// @file GCClient_FindBestAssemblyR_.hpp
/// Data storage class.
///
/// This file was generated by application DATATOOL
/// using the following specifications:
/// 'gencoll_client.asn'.
///
/// ATTENTION:
///   Don't edit or commit this file into CVS as this file will
///   be overridden (by DATATOOL) without warning!

#ifndef OBJECTS_GENOMECOLL_GCCLIENT_FINDBESTASSEMBLYR_BASE_HPP
#define OBJECTS_GENOMECOLL_GCCLIENT_FINDBESTASSEMBLYR_BASE_HPP

// standard includes
#include <serial/serialbase.hpp>

// generated includes
#include <list>
#include <string>
#include <objects/genomecoll/GCClient_FindBestAssemblyF.hpp>
#include <objects/genomecoll/GCClient_FindBestAssemblyS.hpp>

BEGIN_NCBI_SCOPE

#ifndef BEGIN_objects_SCOPE
#  define BEGIN_objects_SCOPE BEGIN_SCOPE(objects)
#  define END_objects_SCOPE END_SCOPE(objects)
#endif
BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

/////////////////////////////////////////////////////////////////////////////
class CGCClient_FindBestAssemblyRequest_Base : public CSerialObject
{
    typedef CSerialObject Tparent;
public:
    // constructor
    CGCClient_FindBestAssemblyRequest_Base(void);
    // destructor
    virtual ~CGCClient_FindBestAssemblyRequest_Base(void);

    // type info
    DECLARE_INTERNAL_TYPE_INFO();

    // types
    typedef list< string > TSeq_id_acc;
    typedef int TFilter;
    typedef int TSort;
    typedef int TAssembly_return_limit;

    // getters
    // setters

    /// mandatory
    /// typedef list< string > TSeq_id_acc
    ///  Check whether the Seq_id_acc data member has been assigned a value.
    bool IsSetSeq_id_acc(void) const;
    /// Check whether it is safe or not to call GetSeq_id_acc method.
    bool CanGetSeq_id_acc(void) const;
    void ResetSeq_id_acc(void);
    const TSeq_id_acc& GetSeq_id_acc(void) const;
    TSeq_id_acc& SetSeq_id_acc(void);

    /// optional with default eGCClient_FindBestAssemblyFilter_latest_major_annotated
    /// typedef int TFilter
    ///  Check whether the Filter data member has been assigned a value.
    bool IsSetFilter(void) const;
    /// Check whether it is safe or not to call GetFilter method.
    bool CanGetFilter(void) const;
    void ResetFilter(void);
    void SetDefaultFilter(void);
    TFilter GetFilter(void) const;
    void SetFilter(TFilter value);
    TFilter& SetFilter(void);

    /// optional with default eGCClient_FindBestAssemblySort_default
    /// typedef int TSort
    ///  Check whether the Sort data member has been assigned a value.
    bool IsSetSort(void) const;
    /// Check whether it is safe or not to call GetSort method.
    bool CanGetSort(void) const;
    void ResetSort(void);
    void SetDefaultSort(void);
    TSort GetSort(void) const;
    void SetSort(TSort value);
    TSort& SetSort(void);

    /// optional
    /// typedef int TAssembly_return_limit
    ///  Check whether the Assembly_return_limit data member has been assigned a value.
    bool IsSetAssembly_return_limit(void) const;
    /// Check whether it is safe or not to call GetAssembly_return_limit method.
    bool CanGetAssembly_return_limit(void) const;
    void ResetAssembly_return_limit(void);
    TAssembly_return_limit GetAssembly_return_limit(void) const;
    void SetAssembly_return_limit(TAssembly_return_limit value);
    TAssembly_return_limit& SetAssembly_return_limit(void);

    /// Reset the whole object
    virtual void Reset(void);


private:
    // Prohibit copy constructor and assignment operator
    CGCClient_FindBestAssemblyRequest_Base(const CGCClient_FindBestAssemblyRequest_Base&);
    CGCClient_FindBestAssemblyRequest_Base& operator=(const CGCClient_FindBestAssemblyRequest_Base&);

    // data
    Uint4 m_set_State[1];
    list< string > m_Seq_id_acc;
    int m_Filter;
    int m_Sort;
    int m_Assembly_return_limit;
};






///////////////////////////////////////////////////////////
///////////////////// inline methods //////////////////////
///////////////////////////////////////////////////////////
inline
bool CGCClient_FindBestAssemblyRequest_Base::IsSetSeq_id_acc(void) const
{
    return ((m_set_State[0] & 0x3) != 0);
}

inline
bool CGCClient_FindBestAssemblyRequest_Base::CanGetSeq_id_acc(void) const
{
    return true;
}

inline
const CGCClient_FindBestAssemblyRequest_Base::TSeq_id_acc& CGCClient_FindBestAssemblyRequest_Base::GetSeq_id_acc(void) const
{
    return m_Seq_id_acc;
}

inline
CGCClient_FindBestAssemblyRequest_Base::TSeq_id_acc& CGCClient_FindBestAssemblyRequest_Base::SetSeq_id_acc(void)
{
    m_set_State[0] |= 0x1;
    return m_Seq_id_acc;
}

inline
bool CGCClient_FindBestAssemblyRequest_Base::IsSetFilter(void) const
{
    return ((m_set_State[0] & 0xc) != 0);
}

inline
bool CGCClient_FindBestAssemblyRequest_Base::CanGetFilter(void) const
{
    return true;
}

inline
void CGCClient_FindBestAssemblyRequest_Base::ResetFilter(void)
{
    m_Filter = eGCClient_FindBestAssemblyFilter_latest_major_annotated;
    m_set_State[0] &= ~0xc;
}

inline
void CGCClient_FindBestAssemblyRequest_Base::SetDefaultFilter(void)
{
    ResetFilter();
}

inline
CGCClient_FindBestAssemblyRequest_Base::TFilter CGCClient_FindBestAssemblyRequest_Base::GetFilter(void) const
{
    return m_Filter;
}

inline
void CGCClient_FindBestAssemblyRequest_Base::SetFilter(CGCClient_FindBestAssemblyRequest_Base::TFilter value)
{
    m_Filter = value;
    m_set_State[0] |= 0xc;
}

inline
CGCClient_FindBestAssemblyRequest_Base::TFilter& CGCClient_FindBestAssemblyRequest_Base::SetFilter(void)
{
#ifdef _DEBUG
    if (!IsSetFilter()) {
        memset(&m_Filter,UnassignedByte(),sizeof(m_Filter));
    }
#endif
    m_set_State[0] |= 0x4;
    return m_Filter;
}

inline
bool CGCClient_FindBestAssemblyRequest_Base::IsSetSort(void) const
{
    return ((m_set_State[0] & 0x30) != 0);
}

inline
bool CGCClient_FindBestAssemblyRequest_Base::CanGetSort(void) const
{
    return true;
}

inline
void CGCClient_FindBestAssemblyRequest_Base::ResetSort(void)
{
    m_Sort = eGCClient_FindBestAssemblySort_default;
    m_set_State[0] &= ~0x30;
}

inline
void CGCClient_FindBestAssemblyRequest_Base::SetDefaultSort(void)
{
    ResetSort();
}

inline
CGCClient_FindBestAssemblyRequest_Base::TSort CGCClient_FindBestAssemblyRequest_Base::GetSort(void) const
{
    return m_Sort;
}

inline
void CGCClient_FindBestAssemblyRequest_Base::SetSort(CGCClient_FindBestAssemblyRequest_Base::TSort value)
{
    m_Sort = value;
    m_set_State[0] |= 0x30;
}

inline
CGCClient_FindBestAssemblyRequest_Base::TSort& CGCClient_FindBestAssemblyRequest_Base::SetSort(void)
{
#ifdef _DEBUG
    if (!IsSetSort()) {
        memset(&m_Sort,UnassignedByte(),sizeof(m_Sort));
    }
#endif
    m_set_State[0] |= 0x10;
    return m_Sort;
}

inline
bool CGCClient_FindBestAssemblyRequest_Base::IsSetAssembly_return_limit(void) const
{
    return ((m_set_State[0] & 0xc0) != 0);
}

inline
bool CGCClient_FindBestAssemblyRequest_Base::CanGetAssembly_return_limit(void) const
{
    return IsSetAssembly_return_limit();
}

inline
void CGCClient_FindBestAssemblyRequest_Base::ResetAssembly_return_limit(void)
{
    m_Assembly_return_limit = 0;
    m_set_State[0] &= ~0xc0;
}

inline
CGCClient_FindBestAssemblyRequest_Base::TAssembly_return_limit CGCClient_FindBestAssemblyRequest_Base::GetAssembly_return_limit(void) const
{
    if (!CanGetAssembly_return_limit()) {
        ThrowUnassigned(3);
    }
    return m_Assembly_return_limit;
}

inline
void CGCClient_FindBestAssemblyRequest_Base::SetAssembly_return_limit(CGCClient_FindBestAssemblyRequest_Base::TAssembly_return_limit value)
{
    m_Assembly_return_limit = value;
    m_set_State[0] |= 0xc0;
}

inline
CGCClient_FindBestAssemblyRequest_Base::TAssembly_return_limit& CGCClient_FindBestAssemblyRequest_Base::SetAssembly_return_limit(void)
{
#ifdef _DEBUG
    if (!IsSetAssembly_return_limit()) {
        memset(&m_Assembly_return_limit,UnassignedByte(),sizeof(m_Assembly_return_limit));
    }
#endif
    m_set_State[0] |= 0x40;
    return m_Assembly_return_limit;
}

///////////////////////////////////////////////////////////
////////////////// end of inline methods //////////////////
///////////////////////////////////////////////////////////





END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE


#endif // OBJECTS_GENOMECOLL_GCCLIENT_FINDBESTASSEMBLYR_BASE_HPP
